#!/usr/bin/env node

/**
 * Eco Fusion Chatbot Setup Script
 * 
 * This script helps set up the chatbot integration by:
 * 1. Creating environment configuration
 * 2. Testing Rasa server connection
 * 3. Validating configuration
 */

import fs from 'fs';
import path from 'path';
import https from 'https';
import http from 'http';
import { fileURLToPath } from 'url';

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = {
  info: (msg) => console.log(`${colors.blue}â„¹${colors.reset} ${msg}`),
  success: (msg) => console.log(`${colors.green}âœ“${colors.reset} ${msg}`),
  warning: (msg) => console.log(`${colors.yellow}âš ${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}âœ—${colors.reset} ${msg}`),
  header: (msg) => console.log(`\n${colors.bright}${colors.cyan}${msg}${colors.reset}\n`)
};

// Configuration
const DEFAULT_CONFIG = {
  RASA_SERVER_URL: 'http://localhost:5005',
  CHATBOT_AUTO_OPEN: 'false',
  CHATBOT_SHOW_WELCOME: 'true'
};

/**
 * Test Rasa server connection
 */
async function testRasaConnection(url) {
  return new Promise((resolve) => {
    const protocol = url.startsWith('https') ? https : http;
    const req = protocol.get(`${url}/status`, (res) => {
      if (res.statusCode === 200) {
        resolve({ success: true, status: res.statusCode });
      } else {
        resolve({ success: false, status: res.statusCode });
      }
    });

    req.on('error', (err) => {
      resolve({ success: false, error: err.message });
    });

    req.setTimeout(5000, () => {
      req.destroy();
      resolve({ success: false, error: 'Connection timeout' });
    });
  });
}

/**
 * Create environment file
 */
function createEnvFile(config) {
  const envContent = `# Eco Fusion Chatbot Configuration
# Generated by setup-chatbot.js

# Rasa Server Configuration
VITE_RASA_SERVER_URL=${config.RASA_SERVER_URL}

# Chatbot UI Settings
VITE_CHATBOT_AUTO_OPEN=${config.CHATBOT_AUTO_OPEN}
VITE_CHATBOT_SHOW_WELCOME=${config.CHATBOT_SHOW_WELCOME}

# Optional: Debug mode
# VITE_DEBUG_CHATBOT=true
`;

  const envPath = path.join(process.cwd(), '.env');
  
  try {
    fs.writeFileSync(envPath, envContent);
    log.success(`Environment file created: ${envPath}`);
    return true;
  } catch (error) {
    log.error(`Failed to create environment file: ${error.message}`);
    return false;
  }
}

/**
 * Check if .env file exists
 */
function checkEnvFile() {
  const envPath = path.join(process.cwd(), '.env');
  return fs.existsSync(envPath);
}

/**
 * Validate configuration
 */
function validateConfig(config) {
  const errors = [];
  
  if (!config.RASA_SERVER_URL) {
    errors.push('RASA_SERVER_URL is required');
  }
  
  if (!config.RASA_SERVER_URL.startsWith('http://') && !config.RASA_SERVER_URL.startsWith('https://')) {
    errors.push('RASA_SERVER_URL must start with http:// or https://');
  }
  
  if (config.CHATBOT_AUTO_OPEN !== 'true' && config.CHATBOT_AUTO_OPEN !== 'false') {
    errors.push('CHATBOT_AUTO_OPEN must be "true" or "false"');
  }
  
  if (config.CHATBOT_SHOW_WELCOME !== 'true' && config.CHATBOT_SHOW_WELCOME !== 'false') {
    errors.push('CHATBOT_SHOW_WELCOME must be "true" or "false"');
  }
  
  return errors;
}

/**
 * Main setup function
 */
async function setup() {
  log.header('Eco Fusion Chatbot Setup');
  
  // Check if .env already exists
  if (checkEnvFile()) {
    log.warning('.env file already exists. Do you want to overwrite it? (y/N)');
    process.stdin.once('data', (data) => {
      const answer = data.toString().trim().toLowerCase();
      if (answer === 'y' || answer === 'yes') {
        runSetup();
      } else {
        log.info('Setup cancelled. Existing .env file preserved.');
        process.exit(0);
      }
    });
  } else {
    runSetup();
  }
}

async function runSetup() {
  log.info('Setting up Eco Fusion Chatbot...');
  
  // Get configuration from user or use defaults
  const config = { ...DEFAULT_CONFIG };
  
  // Test Rasa server connection
  log.info('Testing Rasa server connection...');
  const connectionTest = await testRasaConnection(config.RASA_SERVER_URL);
  
  if (connectionTest.success) {
    log.success(`Rasa server is running (Status: ${connectionTest.status})`);
  } else {
    log.warning(`Cannot connect to Rasa server: ${connectionTest.error || connectionTest.status}`);
    log.info('Make sure your Rasa server is running with: rasa run --enable-api --cors "*"');
  }
  
  // Validate configuration
  const errors = validateConfig(config);
  if (errors.length > 0) {
    log.error('Configuration errors:');
    errors.forEach(error => log.error(`  - ${error}`));
    process.exit(1);
  }
  
  // Create environment file
  if (createEnvFile(config)) {
    log.success('Environment configuration created successfully!');
  } else {
    log.error('Failed to create environment configuration');
    process.exit(1);
  }
  
  // Display next steps
  log.header('Next Steps');
  log.info('1. Start your Rasa server:');
  log.info('   rasa run --enable-api --cors "*"');
  log.info('');
  log.info('2. Start your Rasa actions server (in another terminal):');
  log.info('   rasa run actions');
  log.info('');
  log.info('3. Start your React development server:');
  log.info('   npm run dev');
  log.info('');
  log.info('4. The chatbot widget should appear in the bottom-right corner');
  log.info('');
  log.info('For more information, see: CHATBOT_INTEGRATION.md');
  
  log.success('Setup complete! ðŸŽ‰');
}

// Run setup if this script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  setup().catch((error) => {
    log.error(`Setup failed: ${error.message}`);
    process.exit(1);
  });
}

export { setup, testRasaConnection, createEnvFile };
